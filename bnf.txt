statements ::= statement ";" statements
            | statement_with_end statements
            | statement
            | statement_with_end

statement ::= LET NAME "=" expr
           | unary_exp "=" expr
           | FUNC NAME "(" param_list ")" ":" statements END
           | expr

expr ::= "[" "]"
       | "[" arg_list "]"
       | "{" dict_entries "}"
       | "{" "}"
       | NAME ":" expr
       | expr "+" expr
       | expr "-" expr
       | expr "*" expr
       | expr "/" expr
       | expr "%" expr
       | expr INT_DIV expr
       | expr ">" expr
       | expr "<" expr
       | expr EQUALS expr
       | expr GE expr
       | expr LE expr
       | expr AND expr
       | expr OR expr
       | expr XOR expr
       | expr "?" expr ":" expr
       | unary_exp
       | postfix_exp

dict_entries ::= dict_entry
              | dict_entries COMMA dict_entry

dict_entry ::= NAME ":" expr

unary_exp ::= NOT expr
           | "-" unary_exp
           | "+" unary_exp
           | "~" unary_exp
           | postfix_exp

postfix_exp ::= primary_exp
             | postfix_exp "(" arg_list ")"
             | postfix_exp "(" ")"
             | postfix_exp "[" expr "]"
             | postfix_exp "." NAME

primary_exp ::= "(" expr ")"
             | STRING
             | NAME
             | const

arg_list ::= expr
          | arg_list COMMA expr

const ::= NUMBER

FUNC NAME "(" param_list ")" ":" statements END

param_list ::= NAME
            | param_list COMMA NAME

expr ::= expr "+" expr
       | expr "-" expr
       | expr "*" expr
       | expr "/" expr
       | expr "%" expr
       | expr INT_DIV expr
       | expr ">" expr
       | expr "<" expr
       | expr EQUALS expr
       | expr GE expr
       | expr LE expr
       | expr AND expr
       | expr OR expr
       | expr XOR expr
       | expr "?" expr ":" expr
