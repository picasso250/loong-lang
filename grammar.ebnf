%import common.ESCAPED_STRING   -> STRING
%import common.SIGNED_NUMBER    -> NUMBER
%import common.CNAME -> NAME
%import common.WS
%ignore WS

?start: statements

statements: (statement)* expr

?statement: let_stmt
         | assign_stmt
         | func_def
         | expr ";"

let_stmt: "let" NAME "=" expr ";"

assign_stmt: unary_exp "=" expr ";"

func_def: "fun" NAME params ":" statements "end"

params: "(" [NAME ("," NAME)*] ")"

?expr: func_expr

?func_expr: conditional_exp
    | "fun" params ":" statements "end"
    | short_func_expr
short_func_expr: NAME "=>" expr

dict: "{" [pair ("," pair)*] "}"
pair: NAME ":" expr
list: "[" [expr ("," expr)*] "]"

?conditional_exp: logical_or_exp
               | logical_or_exp "?" expr ":" conditional_exp

?logical_or_exp: logical_and_exp
              | logical_or_exp "or" logical_and_exp

?logical_and_exp: bitwise_exp
               | logical_and_exp "and" bitwise_exp

?bitwise_exp: equality_exp
       | bitwise_exp BITWISE_AND equality_exp
       | bitwise_exp BITWISE_XOR equality_exp
       | bitwise_exp BITWISE_OR equality_exp

?equality_exp: relational_exp
            | equality_exp EQ relational_exp
            | equality_exp NE relational_exp

?relational_exp: shift_expression
              | relational_exp LT shift_expression
              | relational_exp GT shift_expression
              | relational_exp LE shift_expression
              | relational_exp GE shift_expression

?shift_expression: additive_exp
                | shift_expression SHL additive_exp
                | shift_expression SHR additive_exp

?additive_exp: mult_exp
            | additive_exp ADD mult_exp
            | additive_exp SUB mult_exp

?mult_exp: cast_exp
        | mult_exp MUL cast_exp
        | mult_exp DIV cast_exp
        | mult_exp MOD cast_exp

?cast_exp: unary_exp

?unary_exp: NOT expr
         | SUB unary_exp
         | ADD unary_exp
         | BITWISE_NOT unary_exp
         | postfix_exp

?postfix_exp: primary_exp
           | func_call
           | array_access
           | prop_access

func_call: postfix_exp "(" arg_list ")"
array_access: postfix_exp "[" expr "]"
prop_access: postfix_exp "." NAME

?primary_exp: "(" expr ")"
           | STRING
           | NAME
           | const
           | list
           | dict

arg_list: [expr ("," expr)*]

?const: NUMBER

ADD: "+"
SUB: "-"
MUL: "*"
DIV: "/"
MOD: "%"
EQ: "=="
NE: "!="
LT: "<"
GT: ">"
LE: "<="
GE: ">="
SHL: "<<"
SHR: ">>"

NOT: "not"

BITWISE_NOT: "~"
BITWISE_XOR: "^"
BITWISE_AND: "&"
BITWISE_OR: "|"
